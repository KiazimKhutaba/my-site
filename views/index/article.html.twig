{% extends "base.html.twig" %}

{% block content %}


    <div class="article">
        <h3>Битовые операции. Для чего они нужны на примере программировании МК</h3>

        <p>{{ id }}</p>
        <img src="/images/first-post-in-blog.png" alt="" width="70%">

        <h4>Введение</h4>

        <p>
            В своё время я не мог понять смысл таких вещей, как битовые операции. Статьи в интернете не давали мне
            практического понимания этого вопроса. Со временем, когда я столкнулся с программированием микроконтроллеров
            (МК),
            я понял удобство подобных операций, поэтому я решил написать данную статью, чтобы пролить свет на этот
            вопрос людям,
            которые только услышали про битовые операции и хотят узнать конкретное практическое применение данных
            операций.
            Все примеры будут приведены для tms320f28027.
        </p>

        <p>
            Операции битового сдвига:

            Битовые операции, как можно понять из названия, заключаются в сдвиге битов вправо (>>) или влево (<<).

            Давайте предположим, что нам необходимо выставить первый и второй бит в состояние 1, остальные назначить
            нулями. Для этого мы можем записать
        </p>

        <code>
            GpioCtrlRegs.GPADIR.all = (1 <<1) + (1 << 2);
        </code>

        <p>
            Кроме этого бывают случаи, когда нам необходимо получить значения только последних
            битов, для этого может понадобится операция битового сдвига вправо.
            Например, нам может быть необходимо передать 16 бит данных, при том,
            что мы можем за раз передать только 8 бит данных. В такой ситуации может
            пригодится битовый сдвиг вправо, чтобы получить старшие 8 бит.
            Старшие биты можно не обнулять в случае, если при передаче они не
            вместятся и обрежутся при передаче 16 битной величине в 8 битный буфер.
            На стороне приёмника достаточно сдвинуть старшие биты влево и сложить с младшими.
        </p>

        <h4>Битовая операция ИЛИ:</h4>

        <p>
            Допустим нам необходимо выставить конкретный бит в 1, при этом не меняя весь
            регистр. Для этого нам может подойти битовая операция ИЛИ. Ниже приведена таблица
            истинности.
        </p>

        <h4 id="bitovaya-operaciya-ili">Битовая операция ИЛИ:</h4><br>
        <p>Допустим нам необходимо выставить конкретный бит в 1, при этом не меняя весь регистр. Для этого нам может
            подойти битовая операция ИЛИ. Ниже приведена таблица истинности. </p><br>
        <div class="scrollable-table">
            <table>
                <thead>
                <tr>
                    <th>А</th>
                    <th>B</th>
                    <th>A ИЛИ B</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>0</td>
                    <td>0</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>0</td>
                    <td>1</td>
                    <td>1</td>
                </tr>
                <tr>
                    <td>1</td>
                    <td>0</td>
                    <td>1</td>
                </tr>
                <tr>
                    <td>1</td>
                    <td>1</td>
                    <td>1</td>
                </tr>
                </tbody>
            </table>
        </div>
        <br>
        <code class="cpp hljs">GpioCtrlRegs.GPADIR.all |= (<span class="hljs-number"><span class="hljs-number">1</span></span>
            &lt;&lt; <span class="hljs-number"><span class="hljs-number">3</span></span>);</code><br>
        <p>Как видно из таблицы выше, в случае отсутствия единицы в нужном нам бите, там<br>
            будет выставлена единица согласно операции, а остальные биты не будут задействованы.</p><br>
        <h4 id="bitovye-operacii-i-i-ne">Битовые операции И и НЕ</h4><br>
        <p>Бывают случаи, когда нам наоборот требуется выставить конкретный бит в состояние 0. Для этого нам необходимо
            воспользоваться операцией битового И. Для наглядности ниже приведена таблица истинности.</p><br>
        <div class="scrollable-table">
            <table>
                <thead>
                <tr>
                    <th>А</th>
                    <th>B</th>
                    <th>A&amp;B</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>0</td>
                    <td>0</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>0</td>
                    <td>1</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>1</td>
                    <td>0</td>
                    <td>0</td>
                </tr>
                <tr>
                    <td>1</td>
                    <td>1</td>
                    <td>1</td>
                </tr>
                </tbody>
            </table>
        </div>
        <br>
        <p>Как видно из таблицы истинности, если произвести операцию битового И с числом, в котором везде единицы, кроме
            одного бита, то мы сможем выставить 0 в нужном нам бите регистра.</p><br>
        <code class="cpp hljs">GpioCtrlRegs.GPADIR.all &amp;= <span class="hljs-number"><span class="hljs-number">0xFFFFFFF7</span></span>;
            <span class="hljs-comment"><span class="hljs-comment">// Выставили на 3 бите 0</span></span></code><br>
        <p>В примере выше 0xFFFFFFF7<sub>16</sub> = ‭11111111111111111111111111110111‬<sub>2</sub><br>
            Кроме этого битовая операция И может понадобится для определения наличия бита в конкретном регистре.<br>
            Допустим нам надо сразу определить, выставлен 2 или же 3 бит, для этого мы можем произвести операцию</p><br>
        <code class="cpp hljs"><span class="hljs-keyword"><span class="hljs-keyword">if</span></span>(GpioDataRegs.GPADAT.all
            &amp; FFFFFFF3){
            ....
            }</code><br>
        <p>Это выражение истинно, если выставлен любой из 2 и 3 бита или оба бита выставлены одновременно.</p><br>
        <p>Пример выше можно осуществить проще, с помощью комбинирования операции И и НЕ</p><br>
        <code class="cpp hljs">GpioCtrlRegs.GPADIR.all |=(~<span class="hljs-number"><span
                        class="hljs-number">0x008</span></span>);</code><br>
        <p>Или в виде</p><br>
        <code class="cpp hljs">GpioCtrlRegs.GPADIR.all &amp;= ~(<span class="hljs-number"><span
                        class="hljs-number">1</span></span> &lt;&lt; <span class="hljs-number"><span
                        class="hljs-number">3</span></span>);</code><br>
        <h4 id="zaklyuchenie">Заключение</h4><br>
        <p>Спасибо всем кто прочитал. Надеюсь такая простая тема найдёт своего читателя.</p>
    </div>



{% endblock %}